import json
import random
from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, CallbackQuery
from database.db import add_card_to_collection, get_last_open_time, update_last_open_time
from datetime import datetime, timedelta

router = Router()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–∞–∫–∞—Ö
def load_packs():
    with open("data/packs.json", "r", encoding="utf-8") as file:
        return json.load(file)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ä—Ç–∞—Ö
def load_cards():
    with open("data/cards.json", "r", encoding="utf-8") as file:
        return json.load(file)

# –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —à–∞–Ω—Å–æ–≤ —Ä–µ–¥–∫–æ—Å—Ç–∏
def get_random_card(chances):
    cards = load_cards()
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å –ø–æ —à–∞–Ω—Å–∞–º
    rarity = random.choices(
        list(chances.keys()),
        weights=chances.values(),
        k=1
    )[0]
    
    filtered_cards = [card for card in cards if card["rarity"] == rarity]
    return random.choice(filtered_cards) if filtered_cards else None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—ã—á–Ω–æ–º –ø–∞–∫–µ
@router.message(lambda message: message.text == "üì¶ –û–±—ã—á–Ω—ã–π –ø–∞–∫")
async def open_pack_info(message: types.Message):
    packs = load_packs()
    normal_pack = next((p for p in packs if p["pack_id"] == "standard"), None)

    if not normal_pack:
        await message.answer("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    photo = FSInputFile(f"photo/{normal_pack['photo']}")
    text = (f"üì¶ <b>{normal_pack['name']}</b>\n"
            f"üí∞ –¶–µ–Ω–∞: {normal_pack['price']} –º–æ–Ω–µ—Ç\n"
            f"‚è≥ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {normal_pack['interval']} —á\n"
            f"üé≤ –®–∞–Ω—Å—ã:\n"
            + "\n".join([f"  - {rarity.capitalize()}: {chance}%" for rarity, chance in normal_pack["chances"].items()]))

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ –û—Ç–∫—Ä—ã—Ç—å", callback_data="open_normal_pack")]
    ])

    await message.answer_photo(photo, caption=text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫—Ä—ã—Ç—å" –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–∞–∫–∞
@router.callback_query(lambda c: c.data == "open_normal_pack")
async def open_normal_pack(call: CallbackQuery):
    user_id = call.from_user.id
    packs = load_packs()
    normal_pack = next((p for p in packs if p["pack_id"] == "standard"), None)

    if not normal_pack:
        await call.message.answer("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    last_open_time = get_last_open_time(user_id)
    cooldown = timedelta(hours=normal_pack["interval"])

    if last_open_time:
        last_open_time = datetime.strptime(last_open_time, "%Y-%m-%d %H:%M:%S.%f")
        remaining_time = cooldown - (datetime.now() - last_open_time)

        if remaining_time > timedelta(0):  # –ï—Å–ª–∏ –≤—Ä–µ–º—è –µ—â—ë –Ω–µ –≤—ã—à–ª–æ
            hours, remainder = divmod(remaining_time.seconds, 3600)
            minutes = remainder // 60
            await call.message.answer(f"‚åõ –í—ã –Ω–µ–¥–∞–≤–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–ª–∏ –ø–∞–∫. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë {hours} —á {minutes} –º–∏–Ω!")
            return

    card = get_random_card(normal_pack["chances"])

    if not card:
        await call.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    update_last_open_time(user_id)
    add_card_to_collection(user_id, card["card_id"])

    card_image = FSInputFile(f"photo/{card['card_id']}.jpg")
    caption = (f"üé¥ <b>{card['name']}</b>\n"
               f"‚≠ê –†–µ–¥–∫–æ—Å—Ç—å: {card['rarity'].capitalize()}\n"
               f"üèÜ ID –∫–∞—Ä—Ç—ã: {card['card_id']}\n"
               f"üî• –†–µ–π—Ç–∏–Ω–≥: {card['rating']}")

    await call.message.answer_photo(card_image, caption=caption)
