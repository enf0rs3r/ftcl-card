import json
from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram import Router
from aiogram.filters import Command

router = Router()

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞–∫–∞—Ö
def load_packs():
    with open("data/packs.json", "r", encoding="utf-8") as file:
        return json.load(file)

packs = load_packs()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üè¢ –ú–∞–≥–∞–∑–∏–Ω"
@router.message(lambda message: message.text == "üè¢ –ú–∞–≥–∞–∑–∏–Ω")
async def shop_handler(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üéÅ –ü–∞–∫–∏"), KeyboardButton(text="‚öí –¢—Ä–µ–π–¥")],
            [KeyboardButton(text="üí≥ –ü–æ–∫—É–ø–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫"), KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    ))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üéÅ –ü–∞–∫–∏"
@router.message(lambda message: message.text == "üéÅ –ü–∞–∫–∏")
async def packs_handler(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∞–∫–∞:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì¶ –û–±—ã—á–Ω—ã–π –ø–∞–∫"), KeyboardButton(text="‚ôæ –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –ø–∞–∫")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    ))

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–∫–µ
async def send_pack_info(message: types.Message, pack_key: str, callback_data: str):
    pack = packs.get(pack_key)
    if not pack:
        await message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–π –ø–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üéÅ –û—Ç–∫—Ä—ã—Ç—å", callback_data=callback_data)]]
    )
    pack_image = FSInputFile(f"photo/{pack['image']}")  # –ë–µ—Ä–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–∑ packs.json

    caption = (
        f"üéÅ **{pack['name']}**\n"
        f"üí∞ –¶–µ–Ω–∞: {pack['price']} (—Å–µ–π—á–∞—Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ)\n"
        f"‚è≥ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–∫—Ä—ã—Ç–∏—è: {pack['interval']} —á–∞—Å–æ–≤\n"
        f"üé≤ –®–∞–Ω—Å—ã:\n"
    )

    for rarity, chance in pack["chances"].items():
        caption += f"   {rarity.capitalize()} ‚Äî {chance}%\n"

    await message.answer_photo(pack_image, caption=caption, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω–æ–≥–æ –ø–∞–∫–∞
@router.message(lambda message: message.text == "üì¶ –û–±—ã—á–Ω—ã–π –ø–∞–∫")
async def show_normal_pack_info(message: types.Message):
    await send_pack_info(message, "normal_pack", "open_normal_pack")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø–∞–∫–∞
@router.message(lambda message: message.text == "‚ôæ –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –ø–∞–∫")
async def show_endless_pack_info(message: types.Message):
    await send_pack_info(message, "endless_pack", "open_endless_pack")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫—Ä—ã—Ç—å" –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–∞–∫–∞
@router.callback_query(lambda c: c.data == "open_normal_pack")
async def open_normal_pack(callback: types.CallbackQuery):
    from handlers.open_pack import open_pack
    await open_pack(callback.message)  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π –ø–∞–∫
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫—Ä—ã—Ç—å" –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø–∞–∫–∞
@router.callback_query(lambda c: c.data == "open_endless_pack")
async def open_endless_pack(callback: types.CallbackQuery):
    from handlers.endless_pack import endless_pack
    await endless_pack(callback.message)  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –ø–∞–∫
    await callback.answer()
