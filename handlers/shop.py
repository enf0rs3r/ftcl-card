from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram import Router
from handlers.open_pack import open_pack_info
from handlers.endless_pack import endless_pack_info
from handlers.trade import start_trade
from database.db import export_user_cards
from aiogram.filters import Command

router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üè¢ –ú–∞–≥–∞–∑–∏–Ω"
@router.message(lambda message: message.text == "üè¢ –ú–∞–≥–∞–∑–∏–Ω")
async def shop_handler(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üéÅ –ü–∞–∫–∏"), KeyboardButton(text="‚öí –¢—Ä–µ–π–¥")],
            [KeyboardButton(text="üí≥ –ü–æ–∫—É–ø–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫"), KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    ))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üéÅ –ü–∞–∫–∏"
@router.message(lambda message: message.text == "üéÅ –ü–∞–∫–∏")
async def packs_handler(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∞–∫–∞:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì¶ –û–±—ã—á–Ω—ã–π –ø–∞–∫"), KeyboardButton(text="‚ôæ –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –ø–∞–∫")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    ))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω–æ–≥–æ –ø–∞–∫–∞ (–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ –æ –ø–∞–∫–µ)
@router.message(lambda message: message.text == "üì¶ –û–±—ã—á–Ω—ã–π –ø–∞–∫")
async def open_normal_pack_info(message: types.Message):
    await open_pack_info(message)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞–∫–∞ –∏ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø–∞–∫–∞ (–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ –æ –ø–∞–∫–µ)
@router.message(lambda message: message.text == "‚ôæ –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –ø–∞–∫")
async def open_endless_pack_info(message: types.Message):
    await endless_pack_info(message)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞–∫–∞ –∏ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–¢—Ä–µ–π–¥"
@router.message(lambda message: message.text == "‚öí –¢—Ä–µ–π–¥")
async def trade_handler(message: types.Message):
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /trade @username card1_id card2_id –¥–ª—è –æ–±–º–µ–Ω–∞ –∫–∞—Ä—Ç–∞–º–∏.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫—É–ø–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫"
@router.message(lambda message: message.text == "üí≥ –ü–æ–∫—É–ø–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫")
async def buy_handler(message: types.Message):
    await message.answer("–ü–æ–∫—É–ø–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")  # –ó–∞–≥–ª—É—à–∫–∞

@router.message(Command("export_cards"))
async def export_cards_handler(message: types.Message):
    file_path = export_user_cards()
    await message.answer_document(types.FSInputFile(file_path), caption="üìÑ –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@router.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
async def back_handler(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üè¢ –ú–∞–≥–∞–∑–∏–Ω"), KeyboardButton(text="üìÖ –ü—Ä–æ—Ñ–∏–ª—å")]],
        resize_keyboard=True
    ))
