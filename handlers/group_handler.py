from aiogram import Router
from aiogram.types import Message, FSInputFile, ChatMemberUpdated
from database.db import add_card_to_collection, get_last_open_time, update_last_open_time
import json
import random
from datetime import datetime, timedelta

router = Router()

RARITY_CHANCES = {
    "common": 70,
    "rare": 17,
    "epic": 10,
    "legendary": 3
}

PACK_COOLDOWN = timedelta(hours=7)  # 10 —á–∞—Å–æ–≤ –∑–∞–¥–µ—Ä–∂–∫–∞

@router.chat_member()
async def welcome_bot(event: ChatMemberUpdated):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É"""
    if event.new_chat_member.user.id == event.bot.id:
        await event.chat.send_message(
            f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –§–¢–ö–õ. –°–¥–µ–ª–∞–π—Ç–µ –º–µ–Ω—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–æ—á–µ–Ω—å –≤–∞–∂–Ω—ã–π –ø—É–Ω–∫—Ç, —è –Ω–µ –±—É–¥—É —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —ç—Ç–æ–≥–æ!) –∏ –Ω–∞–ø–∏—à–∏—Ç–µ '—Ñ—Ç–∫–ª–∫–∞—Ä—Ç–∞', —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–∫! ‚öΩ"
        )

def load_cards():
    with open("data/cards.json", "r", encoding="utf-8") as file:
        return json.load(file)

def get_random_card():
    cards = load_cards()
    rarity = random.choices(list(RARITY_CHANCES.keys()), weights=RARITY_CHANCES.values(), k=1)[0]
    filtered_cards = [card for card in cards if card["rarity"] == rarity]
    return random.choice(filtered_cards) if filtered_cards else None

@router.message(lambda msg: msg.chat.type in ["group", "supergroup"] and msg.text and msg.text.lower() in ["—Ñ—Ç–∫–ª–∫–∞—Ä—Ç–∞", "–µ–±–∞–ª–∞–π, –¥–∞–π –º–Ω–µ –∫–∞—Ä—Ç—É", "–Ω—É –∏ –≥–¥–µ –º–æ—è –∫–∞—Ä—Ç–∞?"])
async def group_pack_handler(message: Message):
    user_id = message.from_user.id
    last_open_time = get_last_open_time(user_id)

    if last_open_time:
        last_open_time = datetime.strptime(last_open_time, "%Y-%m-%d %H:%M:%S.%f")
        remaining_time = PACK_COOLDOWN - (datetime.now() - last_open_time)
        if remaining_time.total_seconds() > 0:
            hours, minutes = divmod(remaining_time.total_seconds() // 60, 60)
            await message.reply(f"‚åõ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {int(hours)}—á {int(minutes)}–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∞–∫–∞!")
            await message.reply(f"–•–æ—á–µ—à—å –æ—Ç–∫—Ä—ã—Ç—å –µ—â—ë? –í –õ–° –±–æ—Ç–∞ –µ—Å—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –ø–∞–∫ - –ø—Ä–æ–≤–µ—Ä—å —Å–∞–º!")
            return

    card = get_random_card()
    if not card:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    update_last_open_time(user_id)
    add_card_to_collection(user_id, card["card_id"])

    card_image = FSInputFile(f"photo/{card['card_id']}.jpg")
    caption = f"üé¥ <b>{card['name']}</b>\n‚≠ê –†–µ–¥–∫–æ—Å—Ç—å: {card['rarity'].capitalize()}\nüèÜ ID –∫–∞—Ä—Ç—ã: {card['card_id']}\nüî• –†–µ–π—Ç–∏–Ω–≥: {card['rating']}\n–ö–∞—Ä—Ç–∞ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é (–≤ –õ–° –±–æ—Ç–∞)"

    await message.reply_photo(card_image, caption=caption)
