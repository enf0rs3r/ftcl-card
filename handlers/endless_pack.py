import json
import random
from datetime import datetime, timedelta
from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, CallbackQuery
from database.db import add_card_to_collection

router = Router()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–∫–∞
user_cooldowns = {}

# –í—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ (1.5 —Å–µ–∫—É–Ω–¥—ã)
COOLDOWN_TIME = timedelta(seconds=1.5)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–∞–∫–∞—Ö
def load_packs():
    with open("data/packs.json", "r", encoding="utf-8") as file:
        return json.load(file)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ä—Ç–∞—Ö
def load_cards():
    with open("data/cards.json", "r", encoding="utf-8") as file:
        return json.load(file)

# –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—Ä—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø–∞–∫–∞ (—Ç–æ–ª—å–∫–æ common)
def get_common_card():
    cards = load_cards()
    common_cards = [card for card in cards if card["rarity"] == "common"]
    return random.choice(common_cards) if common_cards else None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º –ø–∞–∫–µ
@router.message(lambda message: message.text == "‚ôæ –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –ø–∞–∫")
async def endless_pack_info(message: types.Message):
    packs = load_packs()
    endless_pack = next((p for p in packs if p["pack_id"] == "endless"), None)

    if not endless_pack:
        await message.answer("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    photo = FSInputFile(f"photo/{endless_pack['photo']}")
    text = (f"üì¶ <b>{endless_pack['name']}</b>\n"
            f"üí∞ –¶–µ–Ω–∞: {endless_pack['price']} –º–æ–Ω–µ—Ç\n"
            f"‚è≥ –ò–Ω—Ç–µ—Ä–≤–∞–ª: –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –∫–æ–Ω–µ—á–Ω–æ, –∫—Ä–æ–º–µ —Å–ø–∞–º–∞\n"
            f"üé≤ –®–∞–Ω—Å—ã:\n"
            + "\n".join([f"  - {rarity.capitalize()}: {chance}%" for rarity, chance in endless_pack["chances"].items()]))

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ –û—Ç–∫—Ä—ã—Ç—å", callback_data="open_endless_pack")]
    ])

    await message.answer_photo(photo, caption=text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫—Ä—ã—Ç—å" –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø–∞–∫–∞ —Å –∞–Ω—Ç–∏-—Å–ø–∞–º–æ–º
@router.callback_query(lambda c: c.data == "open_endless_pack")
async def open_endless_pack(call: CallbackQuery):
    user_id = call.from_user.id
    current_time = datetime.now()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º
    if user_id in user_cooldowns:
        last_time = user_cooldowns[user_id]
        if current_time - last_time < COOLDOWN_TIME:
            await call.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ—Ç–∫—Ä—ã—Ç–∏–µ–º, —Å–ø–∞–º–µ—Ä!", show_alert=True)
            return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è
    user_cooldowns[user_id] = current_time

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É
    card = get_common_card()

    if not card:
        await call.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –ø–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    add_card_to_collection(user_id, card["card_id"])

    card_image = FSInputFile(f"photo/{card['card_id']}.jpg")
    caption = (f"üé¥ <b>{card['name']}</b>\n"
               f"‚≠ê –†–µ–¥–∫–æ—Å—Ç—å: {card['rarity'].capitalize()}\n"
               f"üèÜ ID –∫–∞—Ä—Ç—ã: {card['card_id']}\n"
               f"üî• –†–µ–π—Ç–∏–Ω–≥: {card['rating']}")

    await call.message.answer_photo(card_image, caption=caption)
